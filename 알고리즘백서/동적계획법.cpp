/*
동적 계획법(DP, dynamic programming)
= 어렵거나 큰 문제를 간단하고 작은 여러 개의 문제로 나누어서 풀고
  작은 문제의 답들을 이용해 원래 문제의 답을 구하는 방식.

특징)
1. 최적 부분 구조
= 문제의 점답이 작은 문제에 대해서도 정답이어야 한다.
  (전체 문제의 정답은 작은 문제들의 정답을 포함하여 작은 문제들을 통해 큰 문제를 풀 수 있어야 한다.)

2. 부분 문제 반복
= 문제를 여러 개의 작은 문제로 나눌 수 있으며, 나눈 작은 문제들을 전체 문제를 푸는 방법과 같은 방법으로 풀 수 있어야 한다.

방법)
1. 하향식 방법
= 큰 문제를 풀 수 있는 작은 문제가 될 떄까지 나눈 후, 작은 문제들을 풀어 얻은 정답들을 합쳐가며 큰 문제의 답을 구하는 방식.

2. 상향식 방법
= 가장 작은 문제부터 시작하여 큰 문제를 풀 수 있을 때까지 차례대로 문제들을 풀어나가는 방식.


메모이제이션>
= 똑같은 문제를 여러 번 푸는 것을 막기 위한 기법.
  미리 구해둔 정답을 메모해놓고 만약 다음번에 다시 해당 문제를 풀고자 한다면 미리 메모해둔 정답을 가져와서 사용한다.
*/


// 하향식 방법을 이용한 피보나치 수 계산
int d[101010];
int fibo(int n) {
	if (n <= 1) return 1;
	int & res = d[n];
	if (res) return res;
	return res = fibo(n - 1) + (n - 2);
}

// 상향식 방법을 이용한 피보나치 수 계산
int d[101010] = { 1,1 };
for (int i = 2; i <= n; ++i)
	d[i] = d[i - 1] + d[i - 2];